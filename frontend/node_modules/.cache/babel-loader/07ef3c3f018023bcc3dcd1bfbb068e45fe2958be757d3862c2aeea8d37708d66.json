{"ast":null,"code":"import NavBar from '@/components/NavBar.vue';\nimport CartItem from '@/components/CartItem.vue';\nimport Swal from 'sweetalert2';\nimport { useStore } from 'vuex';\nimport { computed } from 'vue';\nexport default {\n  __name: 'CartView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const {\n      cartItems\n    } = store.state;\n    const subtotal = computed(() => {\n      return cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\n    });\n    const total = computed(() => {\n      return subtotal.value;\n    });\n\n    // Función para abrir el modal de pago\n    const openPaymentModal = () => {\n      const totalToPay = computed(() => {\n        // Calcular el total a pagar sumando el precio de todos los productos en el carrito\n        return store.getters.subtotal;\n      });\n      Swal.fire({\n        title: 'Ingrese los datos de pago',\n        html: `\n      <p>Total a pagar: $${totalToPay.value}</p>\n      <input id=\"cardNumber\" type=\"text\" placeholder=\"Número de tarjeta\">\n      <input id=\"cardName\" type=\"text\" placeholder=\"Nombre/Apellido en la tarjeta\">\n    `,\n        showCancelButton: true,\n        confirmButtonText: 'Pagar',\n        cancelButtonText: 'Cancelar',\n        showLoaderOnConfirm: true,\n        preConfirm: () => {\n          const cardNumber = document.getElementById('cardNumber').value;\n          const cardName = document.getElementById('cardName').value;\n\n          // Validar los datos de la tarjeta y procesar el pago\n          if (!cardNumber || !cardName) {\n            Swal.showValidationMessage('Por favor, complete todos los campos');\n          } else {\n            // Simular procesamiento del pago (puedes agregar la lógica real aquí)\n            return new Promise(resolve => {\n              setTimeout(() => {\n                resolve();\n              }, 2000);\n            });\n          }\n        },\n        allowOutsideClick: false\n      }).then(result => {\n        if (result.isConfirmed) {\n          Swal.fire({\n            title: 'Pago exitoso',\n            icon: 'success',\n            showConfirmButton: false,\n            timer: 1500\n          });\n        }\n      });\n    };\n    const __returned__ = {\n      store,\n      cartItems,\n      subtotal,\n      total,\n      openPaymentModal,\n      NavBar,\n      CartItem,\n      get Swal() {\n        return Swal;\n      },\n      get useStore() {\n        return useStore;\n      },\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["NavBar","CartItem","Swal","useStore","computed","store","cartItems","state","subtotal","reduce","total","item","price","quantity","value","openPaymentModal","totalToPay","getters","fire","title","html","showCancelButton","confirmButtonText","cancelButtonText","showLoaderOnConfirm","preConfirm","cardNumber","document","getElementById","cardName","showValidationMessage","Promise","resolve","setTimeout","allowOutsideClick","then","result","isConfirmed","icon","showConfirmButton","timer"],"sources":["E:/Vue+Django/bookshopFolder/frontend/src/views/CartView.vue"],"sourcesContent":["<template>\r\n  <NavBar />\r\n  <div class=\"cart-container\">\r\n    <h2>Shopping Cart</h2>\r\n    <div v-if=\"cartItems.length === 0\">Your cart is empty</div>\r\n    <div v-else>\r\n      <CartItem v-for=\"item in cartItems\" :key=\"item.id\" :product=\"item\" />\r\n      <div class=\"cart-total\">\r\n        <p>Total: ${{ total }}</p>\r\n      </div>\r\n    </div>\r\n    <!-- Botón para abrir el modal de pago -->\r\n    <button @click=\"openPaymentModal\">Pagar</button>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport NavBar from '@/components/NavBar.vue';\r\nimport CartItem from '@/components/CartItem.vue';\r\nimport Swal from 'sweetalert2';\r\nimport { useStore } from 'vuex';\r\nimport { computed } from 'vue';\r\n\r\nconst store = useStore();\r\nconst { cartItems } = store.state;\r\nconst subtotal = computed(() => {\r\n  return cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);\r\n});\r\nconst total = computed(() => {\r\n  return subtotal.value;\r\n});\r\n\r\n// Función para abrir el modal de pago\r\nconst openPaymentModal = () => {\r\n  const totalToPay = computed(() => {\r\n    // Calcular el total a pagar sumando el precio de todos los productos en el carrito\r\n    return store.getters.subtotal;\r\n  });\r\n\r\n  Swal.fire({\r\n    title: 'Ingrese los datos de pago',\r\n    html: `\r\n      <p>Total a pagar: $${totalToPay.value}</p>\r\n      <input id=\"cardNumber\" type=\"text\" placeholder=\"Número de tarjeta\">\r\n      <input id=\"cardName\" type=\"text\" placeholder=\"Nombre/Apellido en la tarjeta\">\r\n    `,\r\n    showCancelButton: true,\r\n    confirmButtonText: 'Pagar',\r\n    cancelButtonText: 'Cancelar',\r\n    showLoaderOnConfirm: true,\r\n    preConfirm: () => {\r\n      const cardNumber = document.getElementById('cardNumber').value;\r\n      const cardName = document.getElementById('cardName').value;\r\n\r\n      // Validar los datos de la tarjeta y procesar el pago\r\n      if (!cardNumber || !cardName) {\r\n        Swal.showValidationMessage('Por favor, complete todos los campos');\r\n      } else {\r\n        // Simular procesamiento del pago (puedes agregar la lógica real aquí)\r\n        return new Promise((resolve) => {\r\n          setTimeout(() => {\r\n            resolve();\r\n          }, 2000);\r\n        });\r\n      }\r\n    },\r\n    allowOutsideClick: false\r\n  }).then((result) => {\r\n    if (result.isConfirmed) {\r\n      Swal.fire({\r\n        title: 'Pago exitoso',\r\n        icon: 'success',\r\n        showConfirmButton: false,\r\n        timer: 1500\r\n      });\r\n    }\r\n  });\r\n};\r\n</script>\r\n\r\n\r\n\r\n<style scoped>\r\n.cart-container {\r\n  margin: 20px;\r\n}\r\n\r\n.cart-total {\r\n  margin-top: 20px;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"mappings":"AAiBA,OAAOA,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,QAAQ,MAAM,2BAA2B;AAChD,OAAOC,IAAI,MAAM,aAAa;AAC9B,SAASC,QAAQ,QAAQ,MAAM;AAC/B,SAASC,QAAQ,QAAQ,KAAK;;;;;;;IAE9B,MAAMC,KAAK,GAAGF,QAAQ,CAAC,CAAC;IACxB,MAAM;MAAEG;IAAU,CAAC,GAAGD,KAAK,CAACE,KAAK;IACjC,MAAMC,QAAQ,GAAGJ,QAAQ,CAAC,MAAM;MAC9B,OAAOE,SAAS,CAACG,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAK,GAAIC,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACE,QAAS,EAAE,CAAC,CAAC;IACnF,CAAC,CAAC;IACF,MAAMH,KAAK,GAAGN,QAAQ,CAAC,MAAM;MAC3B,OAAOI,QAAQ,CAACM,KAAK;IACvB,CAAC,CAAC;;IAEF;IACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;MAC7B,MAAMC,UAAU,GAAGZ,QAAQ,CAAC,MAAM;QAChC;QACA,OAAOC,KAAK,CAACY,OAAO,CAACT,QAAQ;MAC/B,CAAC,CAAC;MAEFN,IAAI,CAACgB,IAAI,CAAC;QACRC,KAAK,EAAE,2BAA2B;QAClCC,IAAI,EAAG;AACX,2BAA2BJ,UAAU,CAACF,KAAM;AAC5C;AACA;AACA,KAAK;QACDO,gBAAgB,EAAE,IAAI;QACtBC,iBAAiB,EAAE,OAAO;QAC1BC,gBAAgB,EAAE,UAAU;QAC5BC,mBAAmB,EAAE,IAAI;QACzBC,UAAU,EAAEA,CAAA,KAAM;UAChB,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACd,KAAK;UAC9D,MAAMe,QAAQ,GAAGF,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACd,KAAK;;UAE1D;UACA,IAAI,CAACY,UAAU,IAAI,CAACG,QAAQ,EAAE;YAC5B3B,IAAI,CAAC4B,qBAAqB,CAAC,sCAAsC,CAAC;UACpE,CAAC,MAAM;YACL;YACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;cAC9BC,UAAU,CAAC,MAAM;gBACfD,OAAO,CAAC,CAAC;cACX,CAAC,EAAE,IAAI,CAAC;YACV,CAAC,CAAC;UACJ;QACF,CAAC;QACDE,iBAAiB,EAAE;MACrB,CAAC,CAAC,CAACC,IAAI,CAAEC,MAAM,IAAK;QAClB,IAAIA,MAAM,CAACC,WAAW,EAAE;UACtBnC,IAAI,CAACgB,IAAI,CAAC;YACRC,KAAK,EAAE,cAAc;YACrBmB,IAAI,EAAE,SAAS;YACfC,iBAAiB,EAAE,KAAK;YACxBC,KAAK,EAAE;UACT,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}