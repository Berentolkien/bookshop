{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\nexport default createStore({\n  state: {\n    cartItems: [] // Aquí se almacenarán los productos del carrito\n  },\n  mutations: {\n    // Mutación para agregar un producto al carrito\n    addToCart(state, product) {},\n    removeFromCart(state, productId) {\n      const productIndex = state.cartItems.findIndex(item => item.id === productId);\n      if (productIndex !== -1) {\n        state.cartItems.splice(productIndex, 1);\n      }\n    },\n    // Mutación para actualizar la cantidad de un producto en el carrito\n    updateQuantity(state, {\n      productId,\n      quantity\n    }) {\n      const product = state.cartItems.find(item => item.id === productId);\n      if (product) {\n        product.quantity = quantity;\n      }\n    }\n  },\n  actions: {\n    // Acción para cargar los productos desde la API\n    async fetchProducts({\n      commit\n    }) {\n      try {\n        const response = await axios.get('http://localhost:8000/api/products');\n        commit('setProducts', response.data);\n      } catch (error) {\n        console.error('Error fetching products:', error);\n      }\n    },\n    // Otras acciones para agregar, eliminar y actualizar productos en el carrito\n    addToCart({\n      commit\n    }, product) {\n      commit('addToCart', product);\n    },\n    removeFromCart({\n      commit\n    }, productId) {\n      commit('removeFromCart', productId);\n    },\n    updateQuantity({\n      commit\n    }, {\n      productId,\n      quantity\n    }) {\n      commit('updateQuantity', {\n        productId,\n        quantity\n      });\n    }\n  },\n  getters: {\n    // Getter para obtener los productos del carrito\n    cartItems(state) {\n      return state.cartItems;\n    },\n    // Getter para obtener el subtotal del carrito\n    subtotal(state) {\n      return state.cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","state","cartItems","mutations","addToCart","product","removeFromCart","productId","productIndex","findIndex","item","id","splice","updateQuantity","quantity","find","actions","fetchProducts","commit","response","get","data","error","console","getters","subtotal","reduce","total","price"],"sources":["E:/Vue+Django/bookshopFolder/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\nimport axios from 'axios';\n\nexport default createStore({\n  state: {\n    cartItems: [], // Aquí se almacenarán los productos del carrito\n  },\n  mutations: {\n    // Mutación para agregar un producto al carrito\n    addToCart(state, product) {\n    },\n    removeFromCart(state, productId) {\n      const productIndex = state.cartItems.findIndex(item => item.id === productId);\n      if (productIndex !== -1) {\n        state.cartItems.splice(productIndex, 1);\n      }\n    }, // Mutación para actualizar la cantidad de un producto en el carrito\n    updateQuantity(state, { productId, quantity }) {\n      const product = state.cartItems.find(item => item.id === productId);\n      if (product) {\n        product.quantity = quantity;\n      }\n    }\n  },\n  actions: {\n    // Acción para cargar los productos desde la API\n    async fetchProducts({ commit }) {\n      try {\n        const response = await axios.get('http://localhost:8000/api/products');\n        commit('setProducts', response.data);\n      } catch (error) {\n        console.error('Error fetching products:', error);\n      }\n    },\n    // Otras acciones para agregar, eliminar y actualizar productos en el carrito\n    addToCart({ commit }, product) {\n      commit('addToCart', product);\n    },\n    removeFromCart({ commit }, productId) {\n      commit('removeFromCart', productId);\n    },\n    updateQuantity({ commit }, { productId, quantity }) {\n      commit('updateQuantity', { productId, quantity });\n    }\n  },\n  getters: {\n    // Getter para obtener los productos del carrito\n    cartItems(state) {\n      return state.cartItems;\n    },\n    // Getter para obtener el subtotal del carrito\n    subtotal(state) {\n      return state.cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);\n    }\n  },\n});"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,eAAeD,WAAW,CAAC;EACzBE,KAAK,EAAE;IACLC,SAAS,EAAE,EAAE,CAAE;EACjB,CAAC;EACDC,SAAS,EAAE;IACT;IACAC,SAASA,CAACH,KAAK,EAAEI,OAAO,EAAE,CAC1B,CAAC;IACDC,cAAcA,CAACL,KAAK,EAAEM,SAAS,EAAE;MAC/B,MAAMC,YAAY,GAAGP,KAAK,CAACC,SAAS,CAACO,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,SAAS,CAAC;MAC7E,IAAIC,YAAY,KAAK,CAAC,CAAC,EAAE;QACvBP,KAAK,CAACC,SAAS,CAACU,MAAM,CAACJ,YAAY,EAAE,CAAC,CAAC;MACzC;IACF,CAAC;IAAE;IACHK,cAAcA,CAACZ,KAAK,EAAE;MAAEM,SAAS;MAAEO;IAAS,CAAC,EAAE;MAC7C,MAAMT,OAAO,GAAGJ,KAAK,CAACC,SAAS,CAACa,IAAI,CAACL,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,SAAS,CAAC;MACnE,IAAIF,OAAO,EAAE;QACXA,OAAO,CAACS,QAAQ,GAAGA,QAAQ;MAC7B;IACF;EACF,CAAC;EACDE,OAAO,EAAE;IACP;IACA,MAAMC,aAAaA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAC,oCAAoC,CAAC;QACtEF,MAAM,CAAC,aAAa,EAAEC,QAAQ,CAACE,IAAI,CAAC;MACtC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IACD;IACAlB,SAASA,CAAC;MAAEc;IAAO,CAAC,EAAEb,OAAO,EAAE;MAC7Ba,MAAM,CAAC,WAAW,EAAEb,OAAO,CAAC;IAC9B,CAAC;IACDC,cAAcA,CAAC;MAAEY;IAAO,CAAC,EAAEX,SAAS,EAAE;MACpCW,MAAM,CAAC,gBAAgB,EAAEX,SAAS,CAAC;IACrC,CAAC;IACDM,cAAcA,CAAC;MAAEK;IAAO,CAAC,EAAE;MAAEX,SAAS;MAAEO;IAAS,CAAC,EAAE;MAClDI,MAAM,CAAC,gBAAgB,EAAE;QAAEX,SAAS;QAAEO;MAAS,CAAC,CAAC;IACnD;EACF,CAAC;EACDU,OAAO,EAAE;IACP;IACAtB,SAASA,CAACD,KAAK,EAAE;MACf,OAAOA,KAAK,CAACC,SAAS;IACxB,CAAC;IACD;IACAuB,QAAQA,CAACxB,KAAK,EAAE;MACd,OAAOA,KAAK,CAACC,SAAS,CAACwB,MAAM,CAAC,CAACC,KAAK,EAAEjB,IAAI,KAAKiB,KAAK,GAAIjB,IAAI,CAACkB,KAAK,GAAGlB,IAAI,CAACI,QAAS,EAAE,CAAC,CAAC;IACzF;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}