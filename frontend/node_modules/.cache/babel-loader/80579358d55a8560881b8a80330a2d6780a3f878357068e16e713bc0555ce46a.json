{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from 'vuex';\nimport axios from 'axios';\nexport default createStore({\n  state: {\n    cart: [],\n    // Aquí se almacenarán los productos del carrito\n    products: []\n  },\n  mutations: {\n    // Las mutaciones son funciones que modifican el estado\n    addToCart(state, product) {\n      state.cart.push(product);\n    }\n    // Otras mutaciones para eliminar productos, actualizar cantidades, etc.\n  },\n  actions: {\n    // Las acciones son funciones que llaman a las mutaciones\n    addToCart(context, product) {\n      context.commit('addToCart', product);\n    }\n    // Otras acciones para eliminar productos, actualizar cantidades, etc.\n  },\n  getters: {\n    // Los getters son funciones que devuelven parte del estado\n    cartItems(state) {\n      return state.cart;\n    },\n    // Obtener la cantidad total de productos en el carrito\n    totalQuantity(state) {\n      return state.cart.reduce((total, item) => total + item.quantity, 0);\n    },\n    // Obtener el subtotal del carrito\n    subtotal(state) {\n      return state.cart.reduce((total, item) => total + item.price * item.quantity, 0);\n    }\n    // Otros getters para obtener la cantidad total de productos en el carrito, el subtotal, etc.\n  }\n});","map":{"version":3,"names":["createStore","axios","state","cart","products","mutations","addToCart","product","push","actions","context","commit","getters","cartItems","totalQuantity","reduce","total","item","quantity","subtotal","price"],"sources":["E:/Vue+Django/bookshopFolder/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\nimport axios from 'axios';\n\n\nexport default createStore({\n  state: {\n    cart: [], // Aquí se almacenarán los productos del carrito\n    products: [],\n  },\n  mutations: {\n    // Las mutaciones son funciones que modifican el estado\n    addToCart(state, product) {\n      state.cart.push(product);\n    },\n    // Otras mutaciones para eliminar productos, actualizar cantidades, etc.\n  },\n  actions: {\n    // Las acciones son funciones que llaman a las mutaciones\n    addToCart(context, product) {\n      context.commit('addToCart', product);\n    },\n    // Otras acciones para eliminar productos, actualizar cantidades, etc.\n  },\n  getters: {\n    // Los getters son funciones que devuelven parte del estado\n    cartItems(state) {\n      return state.cart;\n    },\n    // Obtener la cantidad total de productos en el carrito\n    totalQuantity(state) {\n      return state.cart.reduce((total, item) => total + item.quantity, 0);\n    },\n    // Obtener el subtotal del carrito\n    subtotal(state) {\n      return state.cart.reduce((total, item) => total + (item.price * item.quantity), 0);\n    },\n    // Otros getters para obtener la cantidad total de productos en el carrito, el subtotal, etc.\n  },\n});\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;AAGzB,eAAeD,WAAW,CAAC;EACzBE,KAAK,EAAE;IACLC,IAAI,EAAE,EAAE;IAAE;IACVC,QAAQ,EAAE;EACZ,CAAC;EACDC,SAAS,EAAE;IACT;IACAC,SAASA,CAACJ,KAAK,EAAEK,OAAO,EAAE;MACxBL,KAAK,CAACC,IAAI,CAACK,IAAI,CAACD,OAAO,CAAC;IAC1B;IACA;EACF,CAAC;EACDE,OAAO,EAAE;IACP;IACAH,SAASA,CAACI,OAAO,EAAEH,OAAO,EAAE;MAC1BG,OAAO,CAACC,MAAM,CAAC,WAAW,EAAEJ,OAAO,CAAC;IACtC;IACA;EACF,CAAC;EACDK,OAAO,EAAE;IACP;IACAC,SAASA,CAACX,KAAK,EAAE;MACf,OAAOA,KAAK,CAACC,IAAI;IACnB,CAAC;IACD;IACAW,aAAaA,CAACZ,KAAK,EAAE;MACnB,OAAOA,KAAK,CAACC,IAAI,CAACY,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAK,GAAGC,IAAI,CAACC,QAAQ,EAAE,CAAC,CAAC;IACrE,CAAC;IACD;IACAC,QAAQA,CAACjB,KAAK,EAAE;MACd,OAAOA,KAAK,CAACC,IAAI,CAACY,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAK,GAAIC,IAAI,CAACG,KAAK,GAAGH,IAAI,CAACC,QAAS,EAAE,CAAC,CAAC;IACpF;IACA;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}