{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from 'vuex';\nimport axios from 'axios';\nexport default createStore({\n  state: {\n    cartItems: [] // Aquí se almacenarán los productos del carrito\n  },\n  mutations: {\n    // Mutación para agregar un producto al carrito\n    addToCart(state, product) {\n      const existingProduct = state.cartItems.find(item => item.id === product.id);\n      if (existingProduct) {\n        existingProduct.quantity += product.quantity;\n        existingProduct.subtotal = existingProduct.quantity * existingProduct.price;\n      } else {\n        const newProduct = {\n          ...product\n        };\n        newProduct.subtotal = newProduct.quantity * newProduct.price;\n        state.cartItems.push(newProduct);\n      }\n      state.subtotal += product.price * product.quantity; // Suma el subtotal del producto al total\n    },\n    // Mutación para eliminar un producto del carrito\n    removeFromCart(state, productId) {\n      const productIndex = state.cartItems.findIndex(item => item.id === productId);\n      if (productIndex !== -1) {\n        const removedProduct = state.cartItems[productIndex];\n        state.cartItems.splice(productIndex, 1);\n        state.subtotal -= removedProduct.subtotal; // Resta el subtotal del producto eliminado al total\n      }\n    },\n    // Mutación para actualizar la cantidad de un producto en el carrito\n    updateQuantity(state, {\n      productId,\n      quantity\n    }) {\n      const product = state.cartItems.find(item => item.id === productId);\n      if (product) {\n        product.quantity = quantity;\n      }\n    }\n  },\n  actions: {\n    // Acción para cargar los productos desde la API\n    async fetchProducts({\n      commit\n    }) {\n      try {\n        const response = await axios.get('http://localhost:8000/api/products');\n        commit('setProducts', response.data);\n      } catch (error) {\n        console.error('Error fetching products:', error);\n      }\n    },\n    // Otras acciones para agregar, eliminar y actualizar productos en el carrito\n    addToCart({\n      commit\n    }, product) {\n      commit('addToCart', product);\n    },\n    removeFromCart({\n      commit\n    }, productId) {\n      commit('removeFromCart', productId);\n    },\n    updateQuantity({\n      commit\n    }, {\n      productId,\n      quantity\n    }) {\n      commit('updateQuantity', {\n        productId,\n        quantity\n      });\n    }\n  },\n  getters: {\n    // Getter para obtener los productos del carrito\n    cartItems(state) {\n      return state.cartItems;\n    },\n    // Getter para obtener el subtotal del carrito\n    subtotal(state) {\n      return state.cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","state","cartItems","mutations","addToCart","product","existingProduct","find","item","id","quantity","subtotal","price","newProduct","push","removeFromCart","productId","productIndex","findIndex","removedProduct","splice","updateQuantity","actions","fetchProducts","commit","response","get","data","error","console","getters","reduce","total"],"sources":["E:/Vue+Django/bookshopFolder/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\nimport axios from 'axios';\n\nexport default createStore({\n  state: {\n    cartItems: [], // Aquí se almacenarán los productos del carrito\n  },\n  mutations: {\n    // Mutación para agregar un producto al carrito\n    addToCart(state, product) {\n      const existingProduct = state.cartItems.find(item => item.id === product.id);\n      if (existingProduct) {\n        existingProduct.quantity += product.quantity;\n        existingProduct.subtotal = existingProduct.quantity * existingProduct.price;\n      } else {\n        const newProduct = { ...product };\n        newProduct.subtotal = newProduct.quantity * newProduct.price;\n        state.cartItems.push(newProduct);\n      }\n      state.subtotal += product.price * product.quantity; // Suma el subtotal del producto al total\n    },\n    // Mutación para eliminar un producto del carrito\n    removeFromCart(state, productId) {\n      const productIndex = state.cartItems.findIndex(item => item.id === productId);\n      if (productIndex !== -1) {\n        const removedProduct = state.cartItems[productIndex];\n        state.cartItems.splice(productIndex, 1);\n        state.subtotal -= removedProduct.subtotal; // Resta el subtotal del producto eliminado al total\n      }\n    },\n    // Mutación para actualizar la cantidad de un producto en el carrito\n    updateQuantity(state, { productId, quantity }) {\n      const product = state.cartItems.find(item => item.id === productId);\n      if (product) {\n        product.quantity = quantity;\n      }\n    }\n  },\n  actions: {\n    // Acción para cargar los productos desde la API\n    async fetchProducts({ commit }) {\n      try {\n        const response = await axios.get('http://localhost:8000/api/products');\n        commit('setProducts', response.data);\n      } catch (error) {\n        console.error('Error fetching products:', error);\n      }\n    },\n    // Otras acciones para agregar, eliminar y actualizar productos en el carrito\n    addToCart({ commit }, product) {\n      commit('addToCart', product);\n    },\n    removeFromCart({ commit }, productId) {\n      commit('removeFromCart', productId);\n    },\n    updateQuantity({ commit }, { productId, quantity }) {\n      commit('updateQuantity', { productId, quantity });\n    }\n  },\n  getters: {\n    // Getter para obtener los productos del carrito\n    cartItems(state) {\n      return state.cartItems;\n    },\n    // Getter para obtener el subtotal del carrito\n    subtotal(state) {\n      return state.cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);\n    }\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}